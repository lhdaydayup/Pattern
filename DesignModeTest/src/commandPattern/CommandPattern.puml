@startuml


namespace a#green{
class Invoke{
   - command:Command
   + int excute(int i)
   + int undo()
   + int redo()
}


Command <--"command" Invoke
abstract class Command{
   + int excute(int i)
   + int undo()
   + int redo()
}

AddReceive <--"receive" AddCommand

class AddCommand{
    - receive:AddReceive
    + int excute(int i)
    + int undo()
    + int redo()
}

Command <|--AddCommand

class AddReceive{
    - List<i> iss
    - int index
    - int i=0
    + int add(int i)
    + int undo()
    + int redo()
}

Invoke <.. Client
Command<..Client




/'
修改简易计算器源代码，使之能够实现多次撤销(Undo)
和恢复(Redo)
'/
}

namespace b #yellow{

/'Sunny软件公司欲开发一个基于Windows平
台的公告板系统。该系统提供了一个主菜单
 (Menu)，在主菜单中包含了一些菜单项
 (MenuItem)，可以通过Menu类的
 addMenuItem()方 法增加菜单项。
 菜单项的主要方法是click()，每
 一个菜单项包含一个抽象命令类，
 具体命 令类包括OpenCommand(打开命令)
 ，CreateCommand(新建命令)，EditCommand(编辑命令)
 等，命令类具有一个execute()方法，用于调用公告
 板系统界面类(BoardScreen)的
 open()、 create()、edit()等方法。
 试使用命令模式设计该系统，
 以便降低MenuItem类与BoardScreen 类之间的耦合度'/
}

@enduml